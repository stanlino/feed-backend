{
  "openapi": "3.0.3",
  "info": {
    "title": "Feed backend API",
    "version": "2.1.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Manage users"
    },
    {
      "name": "session",
      "description": "Manage sessions"
    },
    {
      "name": "profiles",
      "description": "Manage profiles"
    },
    {
      "name": "posts",
      "description": "Manage posts"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "description": "The POST /users route is an endpoint for creating new user accounts. It accepts a request with a JSON payload containing a desired username and password. If the provided information is valid and the desired username is not already in use, the route will create a new user account with the provided credentials",
        "requestBody": {
          "description": "User's credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user",
        "description": "The DELETE /users route is an endpoint for deleting user accounts. It accepts a request with an access token in the header as authentication. If the provided token is valid and belongs to a user, the route will delete the user account associated with that token. It's important to note that this action is usually irreversible and the user will lose all the data associated with the account.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/auth": {
      "post": {
        "tags": [
          "session"
        ],
        "summary": "Authenticate a user",
        "description": "The POST /auth route is an endpoint for user authentication. When called, it accepts a request with a username and password as the payload. If the provided credentials are valid, the route returns a JSON object containing an access token. This token can then be used as proof of authentication for future requests to protected routes or resources.",
        "requestBody": {
          "description": "User's credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authentication was a success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "tags": [
          "session"
        ],
        "summary": "Refresh access token",
        "description": "The POST /auth/refresh-token route is an endpoint for refreshing access tokens. It accepts a request with a refresh token as the payload. If the provided token is valid, the route returns a new access token. The new token can be used to authenticate future requests to protected routes or resources. This allows for a seamless experience for the user, without the need for them to re-enter their login credentials.",
        "requestBody": {
          "description": "User's refresh token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/profiles": {
      "post": {
        "tags": [
          "profiles"
        ],
        "summary": "Create a new profile",
        "description": "The POST /profiles route is an endpoint for creating user profiles. It accepts a request with a JSON payload containing user information such as name, avatar, bio, and link. It also accepts a valid access token in the header for authentication and for identifying which user the profile belongs to. If the provided token is valid and belongs to a user, the route will create a new profile with the provided user information",
        "requestBody": {
          "description": "Profile's atributtes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfile"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Profile created successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      },
      "patch": {
        "tags": [
          "profiles"
        ],
        "summary": "Update profile",
        "description": "The PATCH /profiles route is an endpoint for updating user profiles. It accepts a request with a JSON payload containing updated user information such as name, avatar, bio, and link. It also accepts a valid access token in the header for authentication and for identifying which user profile should be updated. If the provided token is valid and belongs to a user, the route will update the user profile with the provided user information.",
        "requestBody": {
          "description": "Profile's atributtes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfile"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      },
      "delete": {
        "tags": [
          "profiles"
        ],
        "summary": "Delete a profile",
        "description": "The DELETE /profiles route is an endpoint for deleting user profiles. It accepts a request with an access token in the header as authentication. If the provided token is valid and belongs to a user, the route will delete the user profile associated with that token. It's important to note that this action is usually irreversible and the user will lose all the data associated with the profile.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/profiles/{username}": {
      "get": {
        "tags": [
          "profiles"
        ],
        "summary": "Find a profile",
        "description": "The GET /profiles/:username route is an endpoint for retrieving user profiles by username. It accepts a username as a path parameter. The route will return the profile information for the user associated with the provided username in a JSON format.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Users's profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/posts": {
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Create a new post",
        "description": "The POST /posts route is an endpoint for creating new posts. It accepts a request with a JSON payload containing post data such as image and text. It also accepts a valid access token in the header for authentication and to identify which user the post belongs to. If the provided token is valid and belongs to a user, the route will create a new post with the provided data.",
        "requestBody": {
          "description": "Post's atributtes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePost"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Post created successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      },
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Find posts",
        "description": "The GET /posts route is an endpoint for retrieving a paginated list of posts. It accepts a 'page' query parameter, which is a integer number. The route will return a list of 10 posts per page, starting from the page number provided in the query parameter.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": "1"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Posts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Posts"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/posts/{post_id}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Find unique post",
        "description": "The GET /posts/:post_id route is an endpoint for retrieving a specific post by its id. It accepts a path parameter, post_id, which is a string that represent the unique identifier of the post. The route will return the post that corresponds to the provided post_id, including the image and text of the post.",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "afnsda0fu9dfadsv7u8ds098"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }        
      },
      "delete": {
        "tags": [
          "posts"
        ],
        "summary": "Delete a post",
        "description": "The DELETE /posts/:post_id route is an endpoint for deleting a specific post by its id. It accepts a path parameter, post_id, which is a string that represents the unique identifier of the post. Additionally, the route also expects an access token in the headers of the request, which is used to verify that the user making the request is authorized to delete the post. The route will only delete the post if it belongs to the user associated with the token sent in the headers of the request.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "afnsda0fu9dfadsv7u8ds098"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Post deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "example": "12345678"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Auth": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gc2Fkc2Fkc2Fkc2FEb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.qie8ujAQD0plOjtAsrxajFvGfzNQXwxkMM2C1tXcRXg"
          },
          "refresh_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "CreateProfile": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the profile",
            "nullable": true,
            "type": "string",
            "example": "John Doe"
          },
          "avatar": {
            "description": "The avatar of the profile",
            "nullable": true,
            "type": "string",
            "example": "https://example.com/avatar.jpg"
          },
          "bio": {
            "description": "The bio of the profile",
            "nullable": true,
            "type": "string",
            "example": "Software developer with 5 years of experience"
          },
          "link": {
            "description": "The link of the profile",
            "nullable": true,
            "type": "string",
            "example": "https://example.com/profile"
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the profile",
            "nullable": true,
            "type": "string",
            "example": "82349023749083218u49032"
          },
          "name": {
            "description": "The name of the profile",
            "nullable": true,
            "type": "string",
            "example": "John Doe"
          },
          "avatar": {
            "description": "The avatar of the profile",
            "nullable": true,
            "type": "string",
            "example": "https://example.com/avatar.jpg"
          },
          "bio": {
            "description": "The bio of the profile",
            "nullable": true,
            "type": "string",
            "example": "Software developer with 5 years of experience"
          },
          "link": {
            "description": "The link of the profile",
            "nullable": true,
            "type": "string",
            "example": "https://example.com/profile"
          }
        }
      },
      "CreatePost": {
        "type": "object",
        "properties": {
          "text": {
            "description": "The name of the profile",
            "nullable": true,
            "type": "string",
            "example": "Hello!"
          },
          "image": {
            "description": "The avatar of the profile",
            "nullable": true,
            "type": "string",
            "example": "https://example.com/image.jpg"
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the post",
            "type": "string",
            "example": "234u2nr9ifwn0efwj"
          },
          "text": {
            "description": "The name of the profile",
            "nullable": true,
            "type": "string",
            "example": "Hello!"
          },
          "image": {
            "description": "The avatar of the profile",
            "nullable": true,
            "type": "string",
            "example": "https://example.com/image.jpg"
          }
        }
      },
      "Posts": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The id of the post",
              "type": "string",
              "example": "234u2nr9ifwn0efwj"
            },
            "text": {
              "description": "The name of the profile",
              "nullable": true,
              "type": "string",
              "example": "Hello!"
            },
            "image": {
              "description": "The avatar of the profile",
              "nullable": true,
              "type": "string",
              "example": "https://example.com/image.jpg"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}